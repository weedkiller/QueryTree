@using Microsoft.Extensions.Options;
@using QueryTree.Models
@model QueryTree.Models.Query
@inject IOptions<CustomizationConfiguration> CustomizationConfiguration

@{
    ViewBag.Title = Model.DatabaseConnection.Name + " - " + Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/bs/jqc-1.12.4/dt-1.10.13/fh-3.1.2/r-2.1.0/sc-1.4.2/datatables.min.css" />
<link rel="stylesheet" type="text/css" href="~/css/pickatime.css">
<div class="back-to-parent-nav">Back to: @Html.ActionLink(Model.DatabaseConnection.Name, "Details", "Home", new { id = Model.DatabaseConnectionID }, null)</div>

<div>
    <div class="row">
        <div class="col-sm-6"><h2>@Html.DisplayFor(model => model.Name)</h2></div>
        <div class="col-sm-6" style="text-align:right; margin-top:21px">
            @if (ViewBag.UserCanModifyQueries)
            {
                <button type="button" class="btn btn-lg btn-default" data-toggle="modal" data-target="#scheduledReportsModal"><span class="glyphicon glyphicon-repeat"></span>&nbsp;Schedule&nbsp;&amp;&nbsp;email</button>
                if (Model.IsSimpleQuery)
                {
                    @Html.ActionLink("Edit", "Edit", "Simple", new { id = Model.QueryID }, new { @class = "btn btn-lg btn-primary" })
                }
                else
                {
                    @Html.ActionLink("Edit", "Edit", new { id = Model.QueryID }, new { @class = "btn btn-lg btn-primary" })
                }
            }
            @Html.ActionLink("Close", "Details", "Home", new { id = Model.DatabaseConnectionID }, new { @class = "btn btn-lg btn-default" })
        </div>
    </div>
    <h5>@Html.DisplayFor(model => model.Description)</h5>

    <hr />
    @*<div id="qt-container"></div>*@
    @Html.Partial("_Qt_simple")

    <div id="data-controls" class="controls">
        <!-- ko if IsDataVisible -->
        @*<span data-bind="visible: IsDataVisible">Rows <span data-bind="text: CurrentRowStartFormatted"></span> to <span data-bind="text: CurrentRowEndFormatted"></span> of <span data-bind="text: CurrentRowsTotalFormatted"></span></span>
            <a id="PagerStart" class="btn btn-lg btn-default" data-bind="visible: IsPreviousVisible, click: NavigateStart">&lt;&lt;</a>
            <a id="PagerPrev" class="btn btn-lg btn-default" data-bind="visible: IsPreviousVisible, click: NavigatePrev">&lt;</a>
            <a id="PagerNext" class="btn btn-lg btn-default" data-bind="visible: IsNextVisible, click: NavigateNext">&gt;</a>
            <a id="PagerEnd" class="btn btn-lg btn-default" data-bind="visible: IsNextVisible, click: NavigateEnd">&gt;&gt;</a>*@
        <!-- /ko -->
        @*<a id="export" target="_blank" href="#" download="export.csv" class="btn btn-lg btn-primary" data-bind="visible: ShowExport, click: Export, attr: { href: ExportUrl, download: ExportFileName }">Export as Excel</a>*@
        @Html.ActionLink("Export as Excel", "ExportQuery", "Api", new { id = Model.QueryID }, new { @class = "btn btn-lg btn-primary" })
    </div>

    <div class="form-group">
        <span class="small">Created by <a href="email:@(Model.CreatedBy.UserName)">@(Model.CreatedBy.UserName)</a> at @(Model.CreatedOn)</span>
    </div>

    <div class="form-group">
        <span class="small">Last updated by <a href="email:@(Model.LastEditedBy.UserName)">@(Model.LastEditedBy.UserName)</a> at @(Model.LastEditedOn)</span>
    </div>

</div>

<div id="scheduledReportsModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" data-bind="disable: Locked">&times;</button>
                <h4 class="modal-title">Schedule This Report</h4>
            </div>
            <div class="modal-body">

                <ul data-bind="foreach: ValidationErrors">
                    <li>
                        <strong data-bind="text: $data" class="text-danger"></strong>
                    </li>
                </ul>
                <br />

                <div class="row">
                    <div class="col-sm-3">
                        <label>Frequency</label>
                    </div>

                    <div class="col-sm-9">
                        <select class="form-control" data-bind="options: Frequency, optionsValue: 'value', optionsText: 'text', value: SelectedFrequency, disable: Locked"></select>
                    </div>
                </div>
                <br />
                <div class="row" data-bind="visible: SelectedFrequency() != 0">
                    <div class="col-sm-3">
                        <label>Time</label>
                    </div>

                    <div class="col-sm-9">
                        <input id="scheduleTime" type='text' class="form-control" data-bind='pickatime: Time, disable: Locked'>
                    </div>
                </div>
                <br />
                <!-- ko if: SelectedFrequency() != 0 && SelectedFrequency() == 2-->
                <div class="row">
                    <div class="col-sm-3">
                        <label>Day of the Week</label>
                    </div>

                    <div class="col-sm-9">
                        <select class="form-control" data-bind="options: Days, optionsValue: 'value', optionsText: 'text', value: SelectedDay, disable: Locked"></select>
                    </div>
                </div>
                <br />
                <!-- /ko -->
                <!-- ko if: SelectedFrequency() != 0 && SelectedFrequency() == 3 -->
                <div class="row">
                    <div class="col-sm-3">
                        <label>Day of the Month</label>
                    </div>

                    <div class="col-sm-2">
                        <input type='number' max="31" min="1" class="form-control" data-bind='value: DayOfMonth, disable: Locked'>
                    </div>
                </div>
                <br />
                <!-- /ko -->
                <!-- ko if: SelectedFrequency() != 0 -->
                <div class="row">
                    <div class="col-sm-3">
                        <label>Recipients</label>
                    </div>

                    <div class="col-sm-9">
                        <textarea class="form-control" rows="3" data-bind='value: Recipients,  event: {keypress: keypress, blur: blurRecipients}, valueUpdate : "afterkeydown", disable: Locked'></textarea>
                    </div>
                </div>
                <!-- /ko -->
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-default" data-bind="click: Submit, disable: Locked">Save</button>
                <button type="button" class="btn btn-default" data-bind="disable: Locked" data-dismiss="modal">Close</button>
            </div>


        </div>
        @Html.Hidden("DatabaseConnectionID", Model.DatabaseConnection.DatabaseConnectionID)
        @Html.HiddenFor(model => model.QueryDefinition)
        @Html.HiddenFor(model => model.QueryID)
    </div>
</div>
@section Scripts {
    <script src="https://cdn.datatables.net/v/bs/dt-1.10.13/fh-3.1.2/r-2.1.0/sc-1.4.2/datatables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/g/jquery.ui@1.9.2,knockout@3.4.0,d3js@3.5.17,momentjs@2.13.0"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/knockout.mapping/2.4.1/knockout.mapping.min.js"></script>
    <script src="~/js/schedule.js"></script>
    @if (!String.IsNullOrEmpty(CustomizationConfiguration.Value.BaseUri))
    {
        <script>
            if (typeof backend !== 'undefined') {
                backend.baseUri = "@CustomizationConfiguration.Value.BaseUri";
            }
        </script>
    }
    <script>
        var ModalViewModel = function(data) {
            var self = this;

            self.Frequency = ko.observableArray([
                { value: 0, text: "None" },
                { value: 1, text: "Daily" },
                { value: 2, text: "Weekly" },
                { value: 3, text: "Monthly" }
            ]);

            self.Days = [
                { value: 1, text: "Monday" },
                { value: 2, text: "Tuesday" },
                { value: 3, text: "Wednesday" },
                { value: 4, text: "Thursday" },
                { value: 5, text: "Friday" },
                { value: 6, text: "Saturday" },
                { value: 7, text: "Sunday" }
            ];

            self.SelectedFrequency = ko.observable(data.frequencyScheduled);
            self.SelectedDay = ko.observable(data.dayOfWeek);
            self.Time = ko.observable(data.time);
            self.DayOfMonth = ko.observable(data.dayOfMonth);
            self.Recipients = ko.observable(data.recipients);
            self.QueryID = ko.observable(@this.Model.QueryID);
            self.Locked = ko.observable(false);

            self.saveCurrentState = function() {
                var recipients = self._validateRecipients();
                self._currentState = {
                    FrequencyScheduled: self.SelectedFrequency(),
                    Time: self.Time(),
                    DayOfWeek: self.SelectedDay(),
                    DayOfMonth: self.DayOfMonth(),
                    Recipients: recipients,
                    QueryID: self.QueryID()
                };
            }

            self.Submit = function() {
                self.Locked(true);
                self.saveCurrentState();
                if (self.ValidationErrors().length == 0) {
                    backend.SaveSchedule(self._currentState, function(data) {
                        self.Locked(false);
                        if (data.status == 200) {
                            $('#scheduledReportsModal').modal('hide')
                            raiseSuccessAlert('schedule-msg', 'Your scheduled report was saved');
                        } else {
                            $('.modal-body')
                                .prepend('<div class="alert alert-danger alert-dismissible"><a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>' + data.statusText + '</div>');
                        }
                    });
                } else {
                    self.Locked(false);
                }
            }

            //events
            self.keypress = function(viewModel, e) {

                if (!(/^[\d\s\w\u0040.,]+$/.test(e.key))) {
                    return false;
                }

                //if (e.keyCode == 32) {
                //    var tmp = viewModel.Recipients().replace(/ /g, ",");
                //    viewModel.Recipients(tmp);
                //}
                return true;

            };
            self.blurRecipients = function(viewModel, e) {
                self._validateRecipients();
            };

            //validation section
            self.ValidationErrors = ko.observableArray([]);
            self.SelectedDay.subscribe(function(newValue) {
                var message = "Select the correct 'Day of the Week'";
                if (newValue < 1 || newValue > 7) {
                    self._cleanValidationErrors(message);
                    self.ValidationErrors.push(message);
                    return;
                }

                self._cleanValidationErrors(message);
            });
            self.DayOfMonth.subscribe(function(newValue) {
                var message = "Select the correct 'Day of the Month'";
                if (newValue < 1 || newValue > 31) {
                    self._cleanValidationErrors(message);
                    self.ValidationErrors.push(message);
                    return;
                }
                self._cleanValidationErrors(message);
            });
            self.Time.subscribe(function(newValue) {
                var message = "Wrong 'Time' format";
                if (newValue != null && !newValue.match(/^(0?[1-9]|1[012])(:[0-5]\d) [APap][mM]$/)) {
                    self._cleanValidationErrors(message);
                    self.ValidationErrors.push(message);
                    return;
                }

                self._cleanValidationErrors(message);
            });

            //helpers
            self._cleanValidationErrors = function(message) {
                self.ValidationErrors.remove(function(el) {
                    return el == message;
                });
            }
            self._validateEmail = function(email) {
                var re =
                    /^(([^<>()\[\]\\.,;:\s\u0040"]+(\.[^<>()\[\]\\.,;:\s\u0040"]+)*)|(".+"))\u0040((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                return re.test(email);
            }
            self._validateRecipients = function() {
                var message = "Enter an email address, or multiple addresses separated by a comma";
                var isValid = true;
                var tmp = self.Recipients().replace(/\s/g, '');
                if (tmp.length > 0) {
                    tmp = tmp.split(',');
                    for (i = 0; i < tmp.length; i++) {
                        if (!self._validateEmail(tmp[i])) {
                            self._cleanValidationErrors(message);
                            self.ValidationErrors.push(message);
                            isValid = false;
                            break;
                        }
                    }
                    tmp = tmp.join(",")
                }

                if (isValid) {
                    self._cleanValidationErrors(message);
                    return tmp;
                }

                return null;
            }
            self._cleanUnsavedChanges = function () {

                self.SelectedFrequency(self._currentState.FrequencyScheduled);
                self.SelectedDay(self._currentState.DayOfWeek);
                self.Time(self._currentState.Time);
                self.DayOfMonth(self._currentState.DayOfMonth);
                self.Recipients(self._currentState.Recipients);
            }

            self.saveCurrentState();

            return self;
        };

        var modalViewModel;

        backend.GetSchedule(@this.Model.QueryID).done(function(data) {
            modalViewModel = new ModalViewModel(data);
            ko.applyBindings(modalViewModel, $("#scheduledReportsModal")[0]);
            $("#scheduleTime").click(function() {
                $(this).pickatime("open");
            });
        });

        $('#scheduledReportsModal').on('hide.bs.modal',function(e) {
            modalViewModel._cleanUnsavedChanges();
            $('.alert').remove();
        });

        $(function () {
            var query = JSON.parse($('input[name=QueryDefinition]').val());

            var selectedNode = query.Nodes.filter(function(node) { return node.Id === query.SelectedNodeId; })[0];

            if ($.inArray(selectedNode.Type, ['Bar Chart', 'Line Chart', 'Pie Chart']) >= 0) {

                $('#chart').show();

                var num = null;

                switch (selectedNode.Type) {
                    case 'Bar Chart':
                        num = 25;
                        break;
                    case 'Line Chart':
                        num = 100;
                        break;
                    case 'Pie Chart':
                        num = 10;
                        break;
                    default:
                        num = 10;
                        break;
                }

                var serverQueryKey = ko.observable();
                backend.LoadData(serverQueryKey, query.Nodes, query.SelectedNodeId, 0, num,"JSON", null, function(data) {
                    utils.RenderChart('#chart', data.rows, selectedNode.Type, 0, data.columnTypes[0], 1, data.columnTypes[1]);
                    $('#spinner').remove();
                });
            } else {
                $('#results').show();

                backend.LoadQueryColumnsName(@this.Model.QueryID).done(function (data) {

                    ko.applyBindings(new ViewModel(data), $("#results")[0]);

                    $("#results").DataTable({
                        "dom": '<l><"top">rt<i><"pagingTable"p><"clear">',
                        responsive: false,
                        searching: true,
                        fixedHeader: true,
                        scrollX: true,
                        ordering: false,
                        processing: true,
                        serverSide: true,
                        info: true,
                        stateSave: true,
                        ajax:{
                            "url": "@CustomizationConfiguration.Value.BaseUri/api/getquerydata/" + @this.Model.QueryID + "/",
                            "type": "POST"
                        },
                    });

                    function ViewModel(data) {
                        var self = this;
                        self.columns = data;
                    };

                });

                $('#results').on('init.dt', function () {
                    $('#spinner').remove();
                });
            }
        });
    </script>
}